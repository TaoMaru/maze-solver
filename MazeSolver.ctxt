#BlueJ class context
comment0.target=MazeSolver
comment1.params=
comment1.target=MazeSolver()
comment1.text=\r\n\ Class\ constructor\r\n\ Instantiates\ inputHandler,\ filename,\ exitCount,\ mDimensions,\ finder,\ &\ exitList\r\n\ with\ default\ values.\r\n
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=void\ greet()
comment2.text=\r\n\ display\ simple\ greeting\r\n
comment3.params=
comment3.target=java.lang.String\ getFilename()
comment3.text=\r\n\ get\ valid\ filename\ input\:\ filename\ must\ have\ length\ >\ 4\ chars,\ &\ have\ '.txt'\r\n\ @return\ filename\ (Str)\r\n
comment4.params=newFilename
comment4.target=void\ readFile(java.lang.String)
comment4.text=\r\n\ read\ file\ from\ provided\ filename\r\n\ throws\ FileNotFoundException,\ IOException\:\ displays\ error\ message\ in\ each\ case,\r\n\ exceptions\ at\ this\ stage\ prevent\ any\ other\ operations\r\n\r\n\ @param\ newFilename\ (Str)\ -\ name\ of\ file\ to\ read\r\n
comment5.params=firstLine
comment5.target=int[]\ pullDimensions(java.lang.String)
comment5.text=\r\n\ pull\ maze\ dimensions\ from\ file\ line\r\n\ @pre\ assumes\ first\ line\ in\ .txt\ files\ contain\ the\ dimensions\ of\ the\ maze\r\n\ \r\n\ @param\ firstLine\ (Str)\r\n\ @return\ dimensions\ (int[2])\r\n
comment6.params=mazeDimensions
comment6.target=void\ setMazeContent2D(int[])
comment6.text=\r\n\ accessor\ method\ for\ mazeContent2D,\ instance\ variable\ holding\ maze\ contents\r\n\ set\ 2D\ array\ with\ dimensions\ from\ maze\ file\r\n\ \r\n\ @param\ mazeDimensions\ (int[2])\r\n
comment7.params=mazeRow\ rowNum
comment7.target=void\ translateMazeRow(java.lang.String,\ int)
comment7.text=\r\n\ translate\ file\ content\ into\ numeric\ 2D\ array\ values\ for\ one\ row\ in\ maze\r\n\ white\ spaces\ -\ '\ 's\ -\ translate\ to\ 0s,\ '\#'s\ translate\ to\ 1s\r\n\ sets\ values\ in\ mazeContent2D\ as\ [currentRow][correspondingCol]\r\n\ \r\n\ @param\ mazeRow\ (Str)\r\n\ @paramm\ rowNum\ (int)\r\n
comment8.params=
comment8.target=int\ findExits()
comment8.text=\r\n\ find\ valid\ exits\ in\ maze\:\ open\ spaces\ indicated\ by\ value\ of\ 0\ in\ maze\ array\r\n\ with\ a\ path\ leading\ from\ maze\ start\ point\ are\ counted\ as\ valid\ exits\r\n\ \r\n\ @return\ numExits\ (int)\ -\ total\ number\ of\ valid\ exits\ in\ maze\r\n
comment9.params=
comment9.target=void\ sayBye()
comment9.text=\r\n\ display\ simple\ goodbye\ message\r\n
numComments=11
